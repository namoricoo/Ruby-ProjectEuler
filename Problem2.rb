#Even Fibonacci numbers
#Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
#
#						1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
#By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


class Problem2

	def sumEvenFibonacciNumbersBelow(upperIntLimit)
		index=1
		finonacciNumber=0
		tempTotal=0
		total=0
		currentNumber=0
		previousNumber=0
		int2=2
		
		while (total < upperIntLimit) && (finonacciNumber < upperIntLimit ) do
			if index == 1				
				currentNumber=index
				finonacciNumber=currentNumber	
				puts("Fibonacci numbers: #{finonacciNumber}")
				index+=1				
			elsif index == 2
				previousNumber=currentNumber
				currentNumber=index
				finonacciNumber=currentNumber
				puts("Fibonacci numbers: #{finonacciNumber}")
				index+=
				total=finonacciNumber	
				tempTotal=finonacciNumber
				#puts("total even numbers= #{total}")	
				
			else
				finonacciNumber=currentNumber+previousNumber
				previousNumber=currentNumber
				currentNumber=finonacciNumber
				puts("Fibonacci numbers: #{finonacciNumber}")
					if isMultiple(int2,finonacciNumber) && (finonacciNumber < upperIntLimit )
						tempTotal += finonacciNumber
						#puts("tempTotal = #{tempTotal}")
						if tempTotal < upperIntLimit
							total = tempTotal
							#puts("total even numbers= #{total}")
						end		
					end	
				#index+=1	
			end					
		end
		printTotal(upperIntLimit,total)

	end
	def printTotal(upperIntLimit,total)
			puts("the sum of the even-valued terms in the Fibonacci sequence whose values do not exceed #{upperIntLimit} is: #{total}")
	end
		
	private #These functions are private to the problem one class.
	def isMultiple(intMultiplier,input)
			if (input % intMultiplier)==0
				#puts(" multiple of #{intMultiplier}: #{input}")
				return true
			else 
				return false
			end		
	end

end

problem2=Problem2.new()
problem2.sumEvenFibonacciNumbersBelow(11)